# -*- coding: utf-8 -*-"""@author: alxgr"""###############################################################################import numpy as np###############################################################################from pyro.dynamic import hybridfrom pyro.dynamic import manipulator##############################################################################################################################################################        class HybridManipulator(manipulator.Manipulator, hybrid.SwitchedSystem):            ############################    def __init__(self, dof = 1 , m = 1 , e = 1 , k = 2):        """ """                # initialize standard params        super().__init__(dof = 1 , m = 1 , e = 1)                # Name        self.name = str(dof) + 'Hybrid Manipulator Robot'                # Number of discrete modes        self.k = k                  # Actuator        self.I_actuators = np.diag( np.ones( self.dof ) )                # Transmissions        self.R_options = [ np.diag( np.ones( self.dof ) ) ,                            np.diag( np.ones( self.dof ) ) ,                            np.diag( np.ones( self.dof ) ) ]                    ###########################################################################    def H_arm(self, q ):        """         Inertia matrix of arm mechanism only        ----------------------------------        dim( H ) = ( dof , dof )                """                  H = np.diag( np.ones( self.dof ) ) # Default is identity matrix                return H            ###########################################################################    def H_actuators(self, q , u ):        """   """                  B = self.B( q, u)        H = np.dot( B , np.dot( self.I_actuators , B.T ) )                return H                ###########################################################################    def H(self, q , u ):        """   """                  H_arm        =  self.H_arm( q )        H_actuators  =  self.H_actuators( u )                H = H_arm + H_actuators                return H            ###########################################################################    def B(self, q , u ):        """         Actuator Matrix  : dof x m        """                u_mode = int(u[0])                B = self.R_options[ u_mode ]                return B        if __name__ == "__main__":    a = HybridManipulator()